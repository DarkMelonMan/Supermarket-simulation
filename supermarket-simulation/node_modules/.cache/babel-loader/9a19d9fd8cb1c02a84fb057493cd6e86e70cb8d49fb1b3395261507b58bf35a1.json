{"ast":null,"code":"var _jsxFileName = \"A:\\\\\\u041F\\u0440\\u043E\\u0435\\u043A\\u0442\\u044B\\\\ReactJS\\\\\\u041F\\u0440\\u0430\\u043A\\u0442\\u0438\\u043A\\u0430 2\\\\hunter-prey-simulation\\\\src\\\\components\\\\Simulation.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './Simulation.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Product {\n  constructor(x, y, cost, ID, stall, attractive) {\n    this.x = x;\n    this.y = y;\n    this.cost = cost;\n    this.ID = ID;\n    this.stall = stall;\n    this.size = 6;\n    this.attractive = attractive;\n    if (attractive > 0) this.color = '#30b705';else this.color = '#7FFFD4';\n    this.originalCost = cost;\n  }\n  draw(ctx) {\n    ctx.fillStyle = this.color;\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n    ctx.fill();\n  }\n  checkNearby() {\n    const productsNearby = [];\n    const productIndex = this.stall.products.indexOf(this);\n    if (productIndex > 0) productsNearby.push(this.stall.products[productIndex - 1]);\n    if (productIndex < this.stall.products.length - 1) productsNearby.push(this.stall.products[productIndex + 1]);\n    return productsNearby;\n  }\n}\nclass Stall {\n  constructor(x, y, width, height, ID) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    this.ID = ID;\n    this.color = '#1E90FF';\n    this.products = [];\n    this.restockTimer = 0;\n  }\n  draw(ctx) {\n    ctx.fillStyle = this.color;\n    ctx.beginPath();\n    ctx.fillRect(this.x, this.y, this.width, this.height);\n    ctx.fill();\n  }\n  calculateDistanceToStall(x, y) {\n    return Math.min(calculateDistance(x, y, this.x, this.y), calculateDistance(x, y, this.x, this.y + this.height), calculateDistance(x, y, this.x + this.width, this.y), calculateDistance(x, y, this.x + this.width, this.y + this.height));\n  }\n  restock(productsCount) {\n    if (this.products.length < productsCount / 2) {\n      this.restockTimer++;\n      if (this.restockTimer > 100) {\n        const newProduct = new Product(this.x + this.width / 2, this.y + this.height - (this.products.length * 12 + 3), Math.random() * 1000 + 10, Math.floor(Math.random() * 100) + 1, this, Math.random() <= 0.5 ? 0 : Math.random() * 90);\n        this.products.push(newProduct);\n        this.restockTimer = 0;\n        return true;\n      }\n    }\n    return false;\n  }\n}\nclass Cashier {\n  constructor(x, y, width, height) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    this.color = '#FF6347';\n    this.queue = [];\n    this.processingTime = 0;\n    this.totalRevenue = 0;\n    this.customersProcessed = 0;\n  }\n  draw(ctx) {\n    ctx.fillStyle = this.color;\n    ctx.beginPath();\n    ctx.fillRect(this.x, this.y, this.width, this.height);\n    ctx.fill();\n\n    // Draw queue\n    ctx.fillStyle = 'rgba(255, 99, 71, 0.5)';\n    for (let i = 0; i < this.queue.length; i++) {\n      ctx.beginPath();\n      ctx.arc(this.x - 20 - i * 20, this.y + this.height / 2, 6, 0, Math.PI * 2);\n      ctx.fill();\n    }\n  }\n  processCustomer() {\n    if (this.queue.length > 0) {\n      this.processingTime++;\n      if (this.processingTime > 60) {\n        const customer = this.queue.shift();\n        let total = 0;\n        customer.productsTaken.forEach(product => {\n          total += product.cost;\n        });\n        this.totalRevenue += total;\n        this.customersProcessed++;\n        this.processingTime = 0;\n        return customer;\n      }\n    }\n    return null;\n  }\n}\nclass Human {\n  constructor(x, y, speed) {\n    this.x = x;\n    this.y = y;\n    this.speed = speed;\n    this.targetX = x;\n    this.targetY = y;\n    this.size = 6;\n    this.direction = Math.PI / 2;\n    this.stop = false;\n    this.color = '#FF8C00';\n  }\n  move(width, height, stalls, humans) {\n    const dx = this.targetX - this.x;\n    const dy = this.targetY - this.y;\n    const distance = Math.sqrt(dx * dx + dy * dy);\n    if (distance > 0 && !this.stop) {\n      // Получаем силу избегания\n      const avoidanceForce = this.avoidObstacles(stalls, humans);\n\n      // Комбинируем основное направление и силу избегания\n      const combinedDx = dx * 0.7 + avoidanceForce[0] * 1.3;\n      const combinedDy = dy * 0.7 + avoidanceForce[1] * 1.3;\n      const combinedDistance = Math.sqrt(combinedDx * combinedDx + combinedDy * combinedDy);\n      if (combinedDistance > 0) {\n        this.direction = Math.atan2(combinedDy, combinedDx);\n        this.x += this.speed * Math.cos(this.direction);\n        this.y += this.speed * Math.sin(this.direction);\n      }\n\n      // Границы области\n      this.x = Math.max(this.size, Math.min(width - this.size, this.x));\n      this.y = Math.max(this.size, Math.min(height - this.size, this.y));\n    }\n  }\n  stopMove() {\n    this.targetX = this.x;\n    this.targetY = this.y;\n    this.stop = true;\n  }\n  avoidObstacles(stalls, humans) {\n    let avoidanceForceX = 0;\n    let avoidanceForceY = 0;\n    const avoidanceRadius = this.size * 4;\n    const personalSpace = this.size * 2;\n\n    // Избегание других покупателей\n    for (const otherHuman of humans) {\n      if (otherHuman !== this && otherHuman !== null) {\n        const distToHuman = calculateDistance(this.x, this.y, otherHuman.x, otherHuman.y);\n        if (distToHuman < personalSpace) {\n          const forceMagnitude = (personalSpace - distToHuman) * 0.5;\n          avoidanceForceX += forceMagnitude * (this.x - otherHuman.x) / distToHuman;\n          avoidanceForceY += forceMagnitude * (this.y - otherHuman.y) / distToHuman;\n        }\n      }\n    }\n\n    // Проверяем, находится ли цель за прилавком\n    if (this.targetX && this.targetY) {\n      for (const stall of stalls) {\n        // Если цель находится за этим прилавком\n        if (this.isTargetBehindStall(stall)) {\n          // Выбираем направление обхода (сверху или снизу)\n\n          // Выбираем оптимальный путь обхода\n          // Если оба пути свободны, выбираем ближайший\n          const distToTop = Math.abs(this.y - (stall.y - personalSpace));\n          const distToBottom = Math.abs(this.y - (stall.y + stall.height + personalSpace));\n          avoidanceForceY += distToTop < distToBottom ? -0.8 : 0.8;\n          break;\n        }\n      }\n    }\n\n    // Стандартное избегание прилавков\n    for (const stall of stalls) {\n      const closestX = Math.max(stall.x, Math.min(this.x, stall.x + stall.width));\n      const closestY = Math.max(stall.y, Math.min(this.y, stall.y + stall.height));\n      let distToStall = calculateDistance(this.x, this.y, closestX, closestY);\n      if (distToStall === 0) distToStall = 0.001;\n      if (distToStall < avoidanceRadius) {\n        const forceMagnitude = (avoidanceRadius - distToStall) * 0.5;\n        avoidanceForceX += forceMagnitude * (this.x - closestX) / distToStall;\n        avoidanceForceY += forceMagnitude * (this.y - closestY) / distToStall;\n      }\n    }\n\n    // Нормализация сил\n    const forceLength = Math.sqrt(avoidanceForceX * avoidanceForceX + avoidanceForceY * avoidanceForceY);\n    if (forceLength > 0) {\n      avoidanceForceX = avoidanceForceX / forceLength * Math.min(forceLength, this.speed * 2);\n      avoidanceForceY = avoidanceForceY / forceLength * Math.min(forceLength, this.speed * 2);\n    }\n    return [avoidanceForceX, avoidanceForceY];\n  }\n\n  // Проверяет, находится ли цель за указанным прилавком\n  isTargetBehindStall(stall) {\n    // Проверяем, находится ли цель за прилавком по оси X\n    const isBehindX = this.x - this.size * 2 < stall.x && this.targetX > stall.x + stall.width || this.x > stall.x + stall.width - this.size * 2 && this.targetX < stall.x;\n\n    // Проверяем, находится ли цель в пределах прилавка по оси Y\n    const isInStallYRange = this.targetY >= stall.y && this.targetY <= stall.y + stall.height;\n\n    // Проверяем, находимся ли мы перед прилавком\n    const isInFrontOfStall = this.y >= stall.y && this.y <= stall.y + stall.height;\n    return isBehindX && isInStallYRange && isInFrontOfStall;\n  }\n  findNearestStall(stalls) {\n    if (!stalls || stalls.length === 0) return null;\n    let nearestStall = null;\n    let shortestDistance = Infinity;\n    for (const stall of stalls) {\n      const distance = stall.calculateDistanceToStall(this.x, this.y);\n      if (distance < shortestDistance) {\n        shortestDistance = distance;\n        nearestStall = stall;\n      }\n    }\n    return nearestStall;\n  }\n  draw(ctx) {\n    ctx.fillStyle = this.color;\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n    ctx.fill();\n  }\n}\nclass Customer extends Human {\n  constructor(x, y, speed, productsAmountToBuy, productsCount, money) {\n    super(x, y, speed);\n    this.money = money * 1000;\n    this.direction = Math.PI / 2;\n    this.size = 6;\n    this.color = '#FF8C00';\n    this.uselessProductsCount = 0;\n    this.productsToBuy = [];\n    this.productsTaken = [];\n    this.checkedStallsIDs = [];\n    this.checking = false;\n    this.state = 'shopping'; // 'shopping', 'checking', 'goingToCashier', 'leaving'\n    this.timeSpent = 0;\n    this.totalSpent = 0;\n    this.currentProductTarget = null;\n    for (let i = 0; i < productsAmountToBuy; i++) {\n      this.productsToBuy.push(Math.floor(Math.random() * (productsCount - 1) + 1.1));\n    }\n  }\n  findNearestStallToCheck(stalls, stallsHeight, stallsWidth) {\n    const nearestStall = super.findNearestStall(stalls);\n    const nearestStallData = [nearestStall];\n    if (nearestStall != null && !this.checkedStallsIDs.includes(nearestStall.ID) && !this.checking) {\n      if (Math.abs(this.x - nearestStall.x) < Math.abs(this.x - nearestStall.x - stallsWidth)) nearestStallData.push(nearestStall.x - this.size * 2);else nearestStallData.push(nearestStall.x + stallsWidth + this.size * 2);\n      nearestStallData.push(nearestStall.y + Math.random() * stallsHeight);\n      return nearestStallData;\n    } else if (stalls.length >= 1 && nearestStall != null) {\n      let newStalls = stalls.filter(item => item.ID !== nearestStall.ID);\n      return this.findNearestStallToCheck(newStalls, stallsHeight, stallsWidth);\n    } else {\n      return null;\n    }\n  }\n  checkStalls(stalls, stallsHeight, stallsWidth, cashiers) {\n    if (this.state === 'leaving') return;\n    if (this.state === 'shopping') {\n      // Если нет текущей цели, ищем новый прилавк\n      if (!this.currentProductTarget) {\n        const nearestStallData = this.findNearestStallToCheck(stalls, stallsHeight, stallsWidth);\n        if (!nearestStallData) {\n          // Нет больше прилавков для проверки - идем на кассу\n          this.goToCashier(cashiers);\n          return;\n        }\n        const [nearestStall, targetX, targetY] = nearestStallData;\n        this.targetX = targetX;\n        this.targetY = targetY;\n        this.currentStall = nearestStall;\n      }\n\n      // Проверяем расстояние до текущей цели\n      const distance = calculateDistance(this.x, this.y, this.targetX, this.targetY);\n      if (distance < this.size * 4) {\n        // Достигли цели - либо прилавка, либо товара\n        if (this.currentProductTarget) {\n          // Берем товар\n          this.takeProduct(this.currentProductTarget);\n          this.currentProductTarget = null;\n\n          // Проверяем, есть ли еще товары в этом прилавке\n          const nextProduct = this.checkForProducts(this.currentStall)[0];\n          if (nextProduct) {\n            this.currentProductTarget = nextProduct;\n            this.targetX = nextProduct.x;\n            this.targetY = nextProduct.y;\n          } else {\n            // Товаров больше нет - отмечаем прилавк как проверенный\n            this.checkedStallsIDs.push(this.currentStall.ID);\n            this.currentStall = null;\n          }\n        } else {\n          // Достигли прилавка - ищем товары\n          const products = this.checkForProducts(this.currentStall);\n          if (products.length > 0) {\n            this.currentProductTarget = products[0];\n            this.targetX = this.x < this.currentStall.x ? products[0].x - this.size * 2 : products[0].x + this.size * 2;\n            this.targetY = products[0].y;\n          } else {\n            // Нет товаров - отмечаем прилавк как проверенный\n            this.checkedStallsIDs.push(this.currentStall.ID);\n            this.currentStall = null;\n          }\n        }\n      }\n    } else if (this.state === 'goingToCashier') {\n      this.timeSpent++;\n      const distance = calculateDistance(this.x, this.y, this.targetX, this.targetY);\n      if (distance < this.size * 2) {\n        this.state = 'inQueue';\n      }\n    }\n  }\n  goToCashier(cashiers) {\n    if (cashiers.length === 0) {\n      this.state = 'leaving';\n      this.targetX = this.x;\n      this.targetY = 700;\n      return;\n    }\n\n    // Find cashier with shortest queue\n    let bestCashier = cashiers[0];\n    for (const cashier of cashiers) {\n      if (cashier.queue.length < bestCashier.queue.length) {\n        bestCashier = cashier;\n      }\n    }\n    this.targetX = bestCashier.x + bestCashier.width / 2;\n    this.targetY = bestCashier.y + bestCashier.height / 2;\n    this.state = 'goingToCashier';\n    bestCashier.queue.push(this);\n  }\n  takeProduct(product) {\n    if (this.money < product.cost) return false;\n    this.productsTaken.push(product);\n    this.money -= product.cost;\n    this.totalSpent += product.cost;\n\n    // Удаляем товар из прилавка\n    const productIndex = product.stall.products.indexOf(product);\n    if (productIndex !== -1) {\n      product.stall.products.splice(productIndex, 1);\n    }\n\n    // Проверяем привлекательные соседние товары\n    const nearbyProducts = product.checkNearby();\n    for (const nearbyProduct of nearbyProducts) {\n      if (Math.random() * 100 < nearbyProduct.attractive && this.money >= nearbyProduct.cost && !this.productsTaken.includes(nearbyProduct)) {\n        this.uselessProductsCount++;\n        this.productsTaken.push(nearbyProduct);\n        this.money -= nearbyProduct.cost;\n        this.totalSpent += nearbyProduct.cost;\n\n        // Удаляем соседний товар\n        const nearbyIndex = nearbyProduct.stall.products.indexOf(nearbyProduct);\n        if (nearbyIndex !== -1) {\n          nearbyProduct.stall.products.splice(nearbyIndex, 1);\n        }\n      }\n    }\n    return true;\n  }\n  checkForProducts(stall) {\n    if (!stall) return [];\n    const availableProducts = stall.products.filter(product => this.productsToBuy.includes(product.ID) && !this.productsTaken.includes(product));\n\n    // Сортируем по расстоянию до покупателя\n    availableProducts.sort((a, b) => calculateDistance(this.x, this.y, a.x, a.y) - calculateDistance(this.x, this.y, b.x, b.y));\n    return availableProducts;\n  }\n  leaveStore() {\n    this.state = 'leaving';\n    this.targetX = this.x;\n    this.targetY = 700;\n  }\n  draw(ctx) {\n    super.draw(ctx);\n\n    // Draw basket contents\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';\n    ctx.beginPath();\n    ctx.arc(this.x, this.y - 10, this.productsTaken.length, 0, Math.PI * 2);\n    ctx.fill();\n  }\n}\nfunction calculateDistance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\nconst Simulation = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const stallsRef = useRef([]);\n  const customersRef = useRef([]);\n  const cashiersRef = useRef([]);\n  const [stats, setStats] = useState({\n    totalRevenue: 0,\n    customersServed: 0,\n    averageSpending: 0,\n    uselessProductsSold: 0,\n    activeCustomers: 0\n  });\n  const [params, setParams] = useState({\n    stallsCount: 5,\n    width: 1200,\n    height: 675,\n    stallsWidth: 20,\n    stallsHeight: 425,\n    isRunning: true,\n    customersCount: 1,\n    speed: 1,\n    cashiersCount: 2,\n    spawnRate: 10000\n  });\n  const [visibleCount, setVisibleCount] = useState(0);\n  const spawnTimerRef = useRef(0);\n  const initSimulation = () => {\n    const newStalls = [];\n    const newProducts = [];\n    const newCustomers = [];\n    const newCashiers = [];\n    const distBetweenStalls = (params.width - params.stallsCount * params.stallsWidth) / (params.stallsCount - 1);\n\n    // Create stalls\n    for (let i = 0; i < params.stallsCount; i++) {\n      const newStall = new Stall(i * params.stallsWidth + i * distBetweenStalls, 50, params.stallsWidth, params.stallsHeight, i + 1);\n      newStalls.push(newStall);\n\n      // Create products for each stall\n      for (let j = 0; j < params.stallsHeight / 12; j++) {\n        const newProduct = new Product(i * params.stallsWidth + i * distBetweenStalls + params.stallsWidth / 2, 50 + j * 12 + 3, Math.random() * 100 + 10, j + 1 + i * (Math.floor(params.stallsHeight / 12) + 1), newStall, Math.random() <= 0.5 ? 0 : Math.random() * 90);\n        newStall.products.push(newProduct);\n        newProducts.push(newProduct);\n      }\n    }\n\n    // Create cashiers\n    const cashierWidth = 30;\n    const cashierHeight = 50;\n    const cashierSpacing = 50;\n    const totalCashiersWidth = params.cashiersCount * cashierWidth + (params.cashiersCount - 1) * cashierSpacing;\n    const startX = (params.width - totalCashiersWidth) / 2;\n    for (let i = 0; i < params.cashiersCount; i++) {\n      const newCashier = new Cashier(startX + i * (cashierWidth + cashierSpacing), params.height - 100, cashierWidth, cashierHeight);\n      newCashiers.push(newCashier);\n    }\n\n    // Create initial customers\n    for (let i = 0; i < params.customersCount; i++) {\n      newCustomers.push(new Customer(Math.random() * params.width, params.height - 6, params.speed, Math.floor(Math.random() * 3) + 1, newProducts.length, Math.random() * 2 + 1));\n    }\n    customersRef.current = newCustomers;\n    stallsRef.current = newStalls;\n    cashiersRef.current = newCashiers;\n    setVisibleCount(newProducts.length);\n    spawnTimerRef.current = 0;\n\n    // Reset stats\n    setStats({\n      totalRevenue: 0,\n      customersServed: 0,\n      averageSpending: 0,\n      uselessProductsSold: 0,\n      activeCustomers: newCustomers.length\n    });\n  };\n  const handleParamChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setParams(prev => ({\n      ...prev,\n      [name]: parseFloat(value)\n    }));\n  };\n  const toggleSimulation = () => {\n    setParams(prev => ({\n      ...prev,\n      isRunning: !prev.isRunning\n    }));\n  };\n  useEffect(() => {\n    initSimulation();\n  }, [params.stallsCount, params.cashiersCount]);\n  useEffect(() => {\n    if (!canvasRef.current) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    let animationFrameId;\n    const animate = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // Restock products\n      let restocked = false;\n      stallsRef.current.forEach(stall => {\n        if (stall.restock(params.stallsHeight / 12)) {\n          restocked = true;\n        }\n      });\n      if (restocked) {\n        let productCount = 0;\n        stallsRef.current.forEach(stall => {\n          productCount += stall.products.length;\n        });\n        setVisibleCount(productCount);\n      }\n\n      // Process cashiers\n      cashiersRef.current.forEach(cashier => {\n        const finishedCustomer = cashier.processCustomer();\n        if (finishedCustomer) {\n          finishedCustomer.leaveStore();\n          setStats(prev => ({\n            ...prev,\n            totalRevenue: prev.totalRevenue + finishedCustomer.totalSpent,\n            customersServed: prev.customersServed + 1,\n            uselessProductsSold: prev.uselessProductsSold + finishedCustomer.uselessProductsCount,\n            averageSpending: prev.customersServed > 0 ? (prev.averageSpending * prev.customersServed + finishedCustomer.totalSpent) / (prev.customersServed + 1) : finishedCustomer.totalSpent\n          }));\n        }\n      });\n\n      // Move and draw customers\n      customersRef.current.forEach(c => {\n        c.checkStalls(stallsRef.current, params.stallsHeight, params.stallsWidth, cashiersRef.current);\n        c.move(canvas.width, canvas.height, stallsRef.current, customersRef.current);\n        c.draw(ctx);\n      });\n\n      // Remove customers who left the store\n      customersRef.current = customersRef.current.filter(c => c.y < canvas.height + 20);\n\n      // Spawn new customers\n      if (params.isRunning) {\n        spawnTimerRef.current++;\n        if (spawnTimerRef.current > params.spawnRate && customersRef.current.length < 50) {\n          const newCustomer = new Customer(Math.random() * params.width, params.height - 6, params.speed, Math.floor(Math.random() * 3) + 1, stallsRef.current.reduce((acc, stall) => acc + stall.products.length, 0), Math.random() * 2 + 1);\n          customersRef.current.push(newCustomer);\n          spawnTimerRef.current = 0;\n          setStats(prev => ({\n            ...prev,\n            activeCustomers: customersRef.current.length\n          }));\n        }\n      }\n\n      // Draw stalls and products\n      stallsRef.current.forEach(p => {\n        p.draw(ctx);\n        p.products.forEach(pr => pr.draw(ctx));\n      });\n\n      // Draw cashiers\n      cashiersRef.current.forEach(c => c.draw(ctx));\n      if (params.isRunning) {\n        animationFrameId = requestAnimationFrame(animate);\n      }\n    };\n    if (params.isRunning) {\n      animationFrameId = requestAnimationFrame(animate);\n    } else {\n      // Draw current state when paused\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      stallsRef.current.forEach(p => p.draw(ctx));\n      stallsRef.current.forEach(p => p.products.forEach(pr => pr.draw(ctx)));\n      customersRef.current.forEach(c => c.draw(ctx));\n      cashiersRef.current.forEach(c => c.draw(ctx));\n    }\n    return () => {\n      cancelAnimationFrame(animationFrameId);\n    };\n  }, [params.isRunning, params.stallsHeight, params.stallsWidth, params.spawnRate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"simulation-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u0423\\u043F\\u0440\\u0430\\u0432\\u043B\\u0435\\u043D\\u0438\\u0435 \\u0441\\u0438\\u043C\\u0443\\u043B\\u044F\\u0446\\u0438\\u0435\\u0439\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 713,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"control-group\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"\\u041A\\u043E\\u043B\\u0438\\u0447\\u0435\\u0441\\u0442\\u0432\\u043E \\u043E\\u0442\\u0434\\u0435\\u043B\\u043E\\u0432:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            name: \"stallsCount\",\n            min: \"1\",\n            max: \"10\",\n            value: params.stallsCount,\n            onChange: handleParamChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 718,\n            columnNumber: 13\n          }, this), params.stallsCount]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 716,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 715,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"control-group\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"\\u041A\\u043E\\u043B\\u0438\\u0447\\u0435\\u0441\\u0442\\u0432\\u043E \\u043A\\u0430\\u0441\\u0441:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            name: \"cashiersCount\",\n            min: \"1\",\n            max: \"5\",\n            value: params.cashiersCount,\n            onChange: handleParamChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 733,\n            columnNumber: 13\n          }, this), params.cashiersCount]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 731,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 730,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"control-group\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"\\u0421\\u043A\\u043E\\u0440\\u043E\\u0441\\u0442\\u044C \\u043F\\u043E\\u043A\\u0443\\u043F\\u0430\\u0442\\u0435\\u043B\\u0435\\u0439:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            name: \"speed\",\n            min: \"0.5\",\n            max: \"5\",\n            step: \"0.1\",\n            value: params.speed,\n            onChange: handleParamChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 748,\n            columnNumber: 13\n          }, this), params.speed.toFixed(1)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 746,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 745,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"control-group\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"\\u0427\\u0430\\u0441\\u0442\\u043E\\u0442\\u0430 \\u043F\\u043E\\u044F\\u0432\\u043B\\u0435\\u043D\\u0438\\u044F:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            name: \"spawnRate\",\n            min: \"10\",\n            max: \"300\",\n            value: params.spawnRate,\n            onChange: handleParamChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 764,\n            columnNumber: 13\n          }, this), params.spawnRate]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 762,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 761,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: initSimulation,\n          children: \"\\u0421\\u0431\\u0440\\u043E\\u0441\\u0438\\u0442\\u044C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 777,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: toggleSimulation,\n          children: params.isRunning ? 'Пауза' : 'Старт'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 778,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 776,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stats\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\u0421\\u0442\\u0430\\u0442\\u0438\\u0441\\u0442\\u0438\\u043A\\u0430 \\u043C\\u0430\\u0433\\u0430\\u0437\\u0438\\u043D\\u0430\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 784,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u0412\\u044B\\u0440\\u0443\\u0447\\u043A\\u0430: $\", stats.totalRevenue.toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 785,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u041E\\u0431\\u0441\\u043B\\u0443\\u0436\\u0435\\u043D\\u043E \\u043F\\u043E\\u043A\\u0443\\u043F\\u0430\\u0442\\u0435\\u043B\\u0435\\u0439: \", stats.customersServed]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 786,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u0421\\u0440\\u0435\\u0434\\u043D\\u0438\\u0439 \\u0447\\u0435\\u043A: $\", stats.averageSpending.toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 787,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u041D\\u0435\\u043D\\u0443\\u0436\\u043D\\u044B\\u0445 \\u0442\\u043E\\u0432\\u0430\\u0440\\u043E\\u0432 \\u043F\\u0440\\u043E\\u0434\\u0430\\u043D\\u043E: \", stats.uselessProductsSold]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 788,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u041F\\u043E\\u043A\\u0443\\u043F\\u0430\\u0442\\u0435\\u043B\\u0435\\u0439 \\u0432 \\u043C\\u0430\\u0433\\u0430\\u0437\\u0438\\u043D\\u0435: \", stats.activeCustomers]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 789,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u0422\\u043E\\u0432\\u0430\\u0440\\u043E\\u0432 \\u043D\\u0430 \\u043F\\u043E\\u043B\\u043A\\u0430\\u0445: \", visibleCount]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 790,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 783,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 712,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"simulation-area\",\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        width: params.width,\n        height: params.height\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 795,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 794,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 711,\n    columnNumber: 5\n  }, this);\n};\n_s(Simulation, \"2jcv8sd2bFx2lEmfX+YOu3BXC5E=\");\n_c = Simulation;\nexport default Simulation;\nvar _c;\n$RefreshReg$(_c, \"Simulation\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Product","constructor","x","y","cost","ID","stall","attractive","size","color","originalCost","draw","ctx","fillStyle","beginPath","arc","Math","PI","fill","checkNearby","productsNearby","productIndex","products","indexOf","push","length","Stall","width","height","restockTimer","fillRect","calculateDistanceToStall","min","calculateDistance","restock","productsCount","newProduct","random","floor","Cashier","queue","processingTime","totalRevenue","customersProcessed","i","processCustomer","customer","shift","total","productsTaken","forEach","product","Human","speed","targetX","targetY","direction","stop","move","stalls","humans","dx","dy","distance","sqrt","avoidanceForce","avoidObstacles","combinedDx","combinedDy","combinedDistance","atan2","cos","sin","max","stopMove","avoidanceForceX","avoidanceForceY","avoidanceRadius","personalSpace","otherHuman","distToHuman","forceMagnitude","isTargetBehindStall","distToTop","abs","distToBottom","closestX","closestY","distToStall","forceLength","isBehindX","isInStallYRange","isInFrontOfStall","findNearestStall","nearestStall","shortestDistance","Infinity","Customer","productsAmountToBuy","money","uselessProductsCount","productsToBuy","checkedStallsIDs","checking","state","timeSpent","totalSpent","currentProductTarget","findNearestStallToCheck","stallsHeight","stallsWidth","nearestStallData","includes","newStalls","filter","item","checkStalls","cashiers","goToCashier","currentStall","takeProduct","nextProduct","checkForProducts","bestCashier","cashier","splice","nearbyProducts","nearbyProduct","nearbyIndex","availableProducts","sort","a","b","leaveStore","x1","y1","x2","y2","pow","Simulation","_s","canvasRef","stallsRef","customersRef","cashiersRef","stats","setStats","customersServed","averageSpending","uselessProductsSold","activeCustomers","params","setParams","stallsCount","isRunning","customersCount","cashiersCount","spawnRate","visibleCount","setVisibleCount","spawnTimerRef","initSimulation","newProducts","newCustomers","newCashiers","distBetweenStalls","newStall","j","cashierWidth","cashierHeight","cashierSpacing","totalCashiersWidth","startX","newCashier","current","handleParamChange","e","name","value","target","prev","parseFloat","toggleSimulation","canvas","getContext","animationFrameId","animate","clearRect","restocked","productCount","finishedCustomer","c","newCustomer","reduce","acc","p","pr","requestAnimationFrame","cancelAnimationFrame","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","step","toFixed","onClick","ref","_c","$RefreshReg$"],"sources":["A:/Проекты/ReactJS/Практика 2/hunter-prey-simulation/src/components/Simulation.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './Simulation.css';\r\n\r\nclass Product {\r\n  constructor(x, y, cost, ID, stall, attractive) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.cost = cost;\r\n    this.ID = ID;\r\n    this.stall = stall;\r\n    this.size = 6;\r\n    this.attractive = attractive;\r\n    if (attractive > 0)\r\n      this.color = '#30b705';\r\n    else this.color = '#7FFFD4';\r\n    this.originalCost = cost;\r\n  }\r\n  \r\n  draw(ctx) {\r\n    ctx.fillStyle = this.color;\r\n    ctx.beginPath();\r\n    ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\r\n    ctx.fill();\r\n  }\r\n  \r\n  checkNearby() {\r\n    const productsNearby = [];\r\n    const productIndex = this.stall.products.indexOf(this);\r\n    if (productIndex > 0) productsNearby.push(this.stall.products[productIndex - 1]);\r\n    if (productIndex < this.stall.products.length - 1) productsNearby.push(this.stall.products[productIndex + 1]);\r\n    return productsNearby;\r\n  }\r\n}\r\n\r\nclass Stall {\r\n  constructor(x, y, width, height, ID) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.width = width;\r\n    this.height = height;\r\n    this.ID = ID;\r\n    this.color = '#1E90FF';\r\n    this.products = [];\r\n    this.restockTimer = 0;\r\n  }\r\n  \r\n  draw(ctx) {\r\n    ctx.fillStyle = this.color;\r\n    ctx.beginPath();\r\n    ctx.fillRect(this.x, this.y, this.width, this.height);\r\n    ctx.fill();\r\n  }\r\n  \r\n  calculateDistanceToStall(x, y) {\r\n    return Math.min(\r\n      calculateDistance(x, y, this.x, this.y),\r\n      calculateDistance(x, y, this.x, this.y + this.height),\r\n      calculateDistance(x, y, this.x + this.width, this.y),\r\n      calculateDistance(x, y, this.x + this.width, this.y + this.height)\r\n    );\r\n  }\r\n  \r\n  restock(productsCount) {\r\n    if (this.products.length < productsCount / 2) {\r\n      this.restockTimer++;\r\n      if (this.restockTimer > 100) {\r\n        const newProduct = new Product(\r\n          this.x + this.width / 2,\r\n          this.y + this.height - (this.products.length * 12 + 3),\r\n          Math.random() * 1000 + 10,\r\n          Math.floor(Math.random() * 100) + 1,\r\n          this,\r\n          Math.random() <= 0.5 ? 0 : Math.random() * 90\r\n        );\r\n        this.products.push(newProduct);\r\n        this.restockTimer = 0;\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\nclass Cashier {\r\n  constructor(x, y, width, height) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.width = width;\r\n    this.height = height;\r\n    this.color = '#FF6347';\r\n    this.queue = [];\r\n    this.processingTime = 0;\r\n    this.totalRevenue = 0;\r\n    this.customersProcessed = 0;\r\n  }\r\n  \r\n  draw(ctx) {\r\n    ctx.fillStyle = this.color;\r\n    ctx.beginPath();\r\n    ctx.fillRect(this.x, this.y, this.width, this.height);\r\n    ctx.fill();\r\n    \r\n    // Draw queue\r\n    ctx.fillStyle = 'rgba(255, 99, 71, 0.5)';\r\n    for (let i = 0; i < this.queue.length; i++) {\r\n      ctx.beginPath();\r\n      ctx.arc(this.x - 20 - i * 20, this.y + this.height / 2, 6, 0, Math.PI * 2);\r\n      ctx.fill();\r\n    }\r\n  }\r\n  \r\n  processCustomer() {\r\n    if (this.queue.length > 0) {\r\n      this.processingTime++;\r\n      if (this.processingTime > 60) {\r\n        const customer = this.queue.shift();\r\n        let total = 0;\r\n        customer.productsTaken.forEach(product => {\r\n          total += product.cost;\r\n        });\r\n        this.totalRevenue += total;\r\n        this.customersProcessed++;\r\n        this.processingTime = 0;\r\n        return customer;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\nclass Human {\r\n  constructor(x, y, speed) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.speed = speed;\r\n    this.targetX = x;\r\n    this.targetY = y;\r\n    this.size = 6;\r\n    this.direction = Math.PI / 2;\r\n    this.stop = false;\r\n    this.color = '#FF8C00';\r\n  }\r\n  \r\n  move(width, height, stalls, humans) {\r\n  const dx = this.targetX - this.x;\r\n  const dy = this.targetY - this.y;\r\n  const distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n  if (distance > 0 && !this.stop) {\r\n    // Получаем силу избегания\r\n    const avoidanceForce = this.avoidObstacles(stalls, humans);\r\n    \r\n    // Комбинируем основное направление и силу избегания\r\n    const combinedDx = dx * 0.7 + avoidanceForce[0] * 1.3;\r\n    const combinedDy = dy * 0.7 + avoidanceForce[1] * 1.3;\r\n    const combinedDistance = Math.sqrt(combinedDx * combinedDx + combinedDy * combinedDy);\r\n    \r\n    if (combinedDistance > 0) {\r\n      this.direction = Math.atan2(combinedDy, combinedDx);\r\n      this.x += this.speed * Math.cos(this.direction);\r\n      this.y += this.speed * Math.sin(this.direction);\r\n    }\r\n\r\n    // Границы области\r\n    this.x = Math.max(this.size, Math.min(width - this.size, this.x));\r\n    this.y = Math.max(this.size, Math.min(height - this.size, this.y));\r\n  }\r\n}\r\n  \r\n  stopMove() {\r\n    this.targetX = this.x;\r\n    this.targetY = this.y;\r\n    this.stop = true;\r\n  }\r\n  \r\n  avoidObstacles(stalls, humans) {\r\n  let avoidanceForceX = 0;\r\n  let avoidanceForceY = 0;\r\n  const avoidanceRadius = this.size * 4;\r\n  const personalSpace = this.size * 2;\r\n\r\n  // Избегание других покупателей\r\n  for (const otherHuman of humans) {\r\n    if (otherHuman !== this && otherHuman !== null) {\r\n      const distToHuman = calculateDistance(this.x, this.y, otherHuman.x, otherHuman.y);\r\n      if (distToHuman < personalSpace) {\r\n        const forceMagnitude = (personalSpace - distToHuman) * 0.5;\r\n        avoidanceForceX += forceMagnitude * (this.x - otherHuman.x) / distToHuman;\r\n        avoidanceForceY += forceMagnitude * (this.y - otherHuman.y) / distToHuman;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Проверяем, находится ли цель за прилавком\r\n  if (this.targetX && this.targetY) {\r\n    for (const stall of stalls) {\r\n      // Если цель находится за этим прилавком\r\n      if (this.isTargetBehindStall(stall)) {\r\n        // Выбираем направление обхода (сверху или снизу)\r\n        \r\n        // Выбираем оптимальный путь обхода\r\n          // Если оба пути свободны, выбираем ближайший\r\n          const distToTop = Math.abs(this.y - (stall.y - personalSpace));\r\n          const distToBottom = Math.abs(this.y - (stall.y + stall.height + personalSpace));\r\n          avoidanceForceY += distToTop < distToBottom ? -0.8 : 0.8;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Стандартное избегание прилавков\r\n  for (const stall of stalls) {\r\n    const closestX = Math.max(stall.x, Math.min(this.x, stall.x + stall.width));\r\n    const closestY = Math.max(stall.y, Math.min(this.y, stall.y + stall.height));\r\n    let distToStall = calculateDistance(this.x, this.y, closestX, closestY);\r\n    if (distToStall === 0) distToStall = 0.001;\r\n    if (distToStall < avoidanceRadius) {\r\n      const forceMagnitude = (avoidanceRadius - distToStall) * 0.5;\r\n      avoidanceForceX += forceMagnitude * (this.x - closestX) / distToStall;\r\n      avoidanceForceY += forceMagnitude * (this.y - closestY) / distToStall;\r\n    }\r\n  }\r\n\r\n  // Нормализация сил\r\n  const forceLength = Math.sqrt(avoidanceForceX * avoidanceForceX + avoidanceForceY * avoidanceForceY);\r\n  if (forceLength > 0) {\r\n    avoidanceForceX = (avoidanceForceX / forceLength) * Math.min(forceLength, this.speed * 2);\r\n    avoidanceForceY = (avoidanceForceY / forceLength) * Math.min(forceLength, this.speed * 2);\r\n  }\r\n\r\n  return [avoidanceForceX, avoidanceForceY];\r\n}\r\n\r\n// Проверяет, находится ли цель за указанным прилавком\r\nisTargetBehindStall(stall) {\r\n  // Проверяем, находится ли цель за прилавком по оси X\r\n  const isBehindX = (this.x - this.size * 2 < stall.x && this.targetX > stall.x + stall.width) ||\r\n                   (this.x > stall.x + stall.width - this.size * 2 && this.targetX < stall.x);\r\n  \r\n  // Проверяем, находится ли цель в пределах прилавка по оси Y\r\n  const isInStallYRange = this.targetY >= stall.y && this.targetY <= stall.y + stall.height;\r\n  \r\n  // Проверяем, находимся ли мы перед прилавком\r\n  const isInFrontOfStall = this.y >= stall.y && this.y <= stall.y + stall.height;\r\n  \r\n  return isBehindX && isInStallYRange && isInFrontOfStall;\r\n}\r\n  \r\n  findNearestStall(stalls) {\r\n    if (!stalls || stalls.length === 0) return null;\r\n    \r\n    let nearestStall = null;\r\n    let shortestDistance = Infinity;\r\n    \r\n    for (const stall of stalls) {\r\n      const distance = stall.calculateDistanceToStall(this.x, this.y);\r\n      if (distance < shortestDistance) {\r\n        shortestDistance = distance;\r\n        nearestStall = stall;\r\n      }\r\n    }\r\n    \r\n    return nearestStall;\r\n  }\r\n  \r\n  draw(ctx) {\r\n    ctx.fillStyle = this.color;\r\n    ctx.beginPath();\r\n    ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\r\n    ctx.fill();\r\n  }\r\n}\r\n\r\nclass Customer extends Human {\r\n  constructor(x, y, speed, productsAmountToBuy, productsCount, money) {\r\n    super(x, y, speed);\r\n    this.money = money * 1000;\r\n    this.direction = Math.PI / 2;\r\n    this.size = 6;\r\n    this.color = '#FF8C00';\r\n    this.uselessProductsCount = 0;\r\n    this.productsToBuy = [];\r\n    this.productsTaken = [];\r\n    this.checkedStallsIDs = [];\r\n    this.checking = false;\r\n    this.state = 'shopping'; // 'shopping', 'checking', 'goingToCashier', 'leaving'\r\n    this.timeSpent = 0;\r\n    this.totalSpent = 0;\r\n    this.currentProductTarget = null;\r\n    \r\n    for (let i = 0; i < productsAmountToBuy; i++) {\r\n      this.productsToBuy.push(Math.floor(Math.random() * (productsCount - 1) + 1.1));\r\n    }\r\n  }\r\n  findNearestStallToCheck(stalls, stallsHeight, stallsWidth) {\r\n    const nearestStall = super.findNearestStall(stalls);\r\n    const nearestStallData = [nearestStall];\r\n    \r\n    if (nearestStall != null && !this.checkedStallsIDs.includes(nearestStall.ID) && !this.checking) {\r\n      if (Math.abs(this.x - nearestStall.x) < Math.abs(this.x - nearestStall.x - stallsWidth)) \r\n        nearestStallData.push(nearestStall.x - this.size * 2);\r\n      else \r\n        nearestStallData.push(nearestStall.x + stallsWidth + this.size * 2);\r\n      nearestStallData.push(nearestStall.y + Math.random() * stallsHeight);\r\n      return nearestStallData;\r\n    } else if (stalls.length >= 1 && nearestStall != null) {\r\n      let newStalls = stalls.filter(item => item.ID !== nearestStall.ID);\r\n      return this.findNearestStallToCheck(newStalls, stallsHeight, stallsWidth);\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  \r\n  checkStalls(stalls, stallsHeight, stallsWidth, cashiers) {\r\n    if (this.state === 'leaving') return;\r\n    \r\n    if (this.state === 'shopping') {\r\n      // Если нет текущей цели, ищем новый прилавк\r\n      if (!this.currentProductTarget) {\r\n        const nearestStallData = this.findNearestStallToCheck(stalls, stallsHeight, stallsWidth);\r\n        \r\n        if (!nearestStallData) {\r\n          // Нет больше прилавков для проверки - идем на кассу\r\n          this.goToCashier(cashiers);\r\n          return;\r\n        }\r\n        \r\n        const [nearestStall, targetX, targetY] = nearestStallData;\r\n        this.targetX = targetX;\r\n        this.targetY = targetY;\r\n        this.currentStall = nearestStall;\r\n      }\r\n\r\n      // Проверяем расстояние до текущей цели\r\n      const distance = calculateDistance(this.x, this.y, this.targetX, this.targetY);\r\n      \r\n      if (distance < this.size * 4) {\r\n        // Достигли цели - либо прилавка, либо товара\r\n        if (this.currentProductTarget) {\r\n          // Берем товар\r\n          this.takeProduct(this.currentProductTarget);\r\n          this.currentProductTarget = null;\r\n          \r\n          // Проверяем, есть ли еще товары в этом прилавке\r\n          const nextProduct = this.checkForProducts(this.currentStall)[0];\r\n          if (nextProduct) {\r\n            this.currentProductTarget = nextProduct;\r\n            this.targetX = nextProduct.x;\r\n            this.targetY = nextProduct.y;\r\n          } else {\r\n            // Товаров больше нет - отмечаем прилавк как проверенный\r\n            this.checkedStallsIDs.push(this.currentStall.ID);\r\n            this.currentStall = null;\r\n          }\r\n        } else {\r\n          // Достигли прилавка - ищем товары\r\n          const products = this.checkForProducts(this.currentStall);\r\n          if (products.length > 0) {\r\n            this.currentProductTarget = products[0];\r\n            this.targetX = this.x < this.currentStall.x ? products[0].x - this.size * 2 : products[0].x + this.size * 2;\r\n            this.targetY = products[0].y;\r\n          } else {\r\n            // Нет товаров - отмечаем прилавк как проверенный\r\n            this.checkedStallsIDs.push(this.currentStall.ID);\r\n            this.currentStall = null;\r\n          }\r\n        }\r\n      }\r\n    } else if (this.state === 'goingToCashier') {\r\n      this.timeSpent++;\r\n      const distance = calculateDistance(this.x, this.y, this.targetX, this.targetY);\r\n      if (distance < this.size * 2) {\r\n        this.state = 'inQueue';\r\n      }\r\n    }\r\n  }\r\n  \r\n  goToCashier(cashiers) {\r\n    if (cashiers.length === 0) {\r\n      this.state = 'leaving';\r\n      this.targetX = this.x;\r\n      this.targetY = 700;\r\n      return;\r\n    }\r\n    \r\n    // Find cashier with shortest queue\r\n    let bestCashier = cashiers[0];\r\n    for (const cashier of cashiers) {\r\n      if (cashier.queue.length < bestCashier.queue.length) {\r\n        bestCashier = cashier;\r\n      }\r\n    }\r\n    \r\n    this.targetX = bestCashier.x + bestCashier.width / 2;\r\n    this.targetY = bestCashier.y + bestCashier.height / 2;\r\n    this.state = 'goingToCashier';\r\n    bestCashier.queue.push(this);\r\n  }\r\n  \r\n  takeProduct(product) {\r\n    if (this.money < product.cost) return false;\r\n    \r\n    this.productsTaken.push(product);\r\n    this.money -= product.cost;\r\n    this.totalSpent += product.cost;\r\n    \r\n    // Удаляем товар из прилавка\r\n    const productIndex = product.stall.products.indexOf(product);\r\n    if (productIndex !== -1) {\r\n      product.stall.products.splice(productIndex, 1);\r\n    }\r\n    \r\n    // Проверяем привлекательные соседние товары\r\n    const nearbyProducts = product.checkNearby();\r\n    for (const nearbyProduct of nearbyProducts) {\r\n      if (Math.random() * 100 < nearbyProduct.attractive && \r\n          this.money >= nearbyProduct.cost &&\r\n          !this.productsTaken.includes(nearbyProduct)) {\r\n        this.uselessProductsCount++;\r\n        this.productsTaken.push(nearbyProduct);\r\n        this.money -= nearbyProduct.cost;\r\n        this.totalSpent += nearbyProduct.cost;\r\n        \r\n        // Удаляем соседний товар\r\n        const nearbyIndex = nearbyProduct.stall.products.indexOf(nearbyProduct);\r\n        if (nearbyIndex !== -1) {\r\n          nearbyProduct.stall.products.splice(nearbyIndex, 1);\r\n        }\r\n      }\r\n    }\r\n    \r\n    return true;\r\n  }\r\n  \r\n  checkForProducts(stall) {\r\n    if (!stall) return [];\r\n    \r\n    const availableProducts = stall.products.filter(product => \r\n      this.productsToBuy.includes(product.ID) && \r\n      !this.productsTaken.includes(product)\r\n    );\r\n    \r\n    // Сортируем по расстоянию до покупателя\r\n    availableProducts.sort((a, b) => \r\n      calculateDistance(this.x, this.y, a.x, a.y) - \r\n      calculateDistance(this.x, this.y, b.x, b.y)\r\n    );\r\n    \r\n    return availableProducts;\r\n  }\r\n  \r\n  leaveStore() {\r\n    this.state = 'leaving';\r\n    this.targetX = this.x;\r\n    this.targetY = 700;\r\n  }\r\n  \r\n  draw(ctx) {\r\n    super.draw(ctx);\r\n    \r\n    // Draw basket contents\r\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';\r\n    ctx.beginPath();\r\n    ctx.arc(this.x, this.y - 10, this.productsTaken.length, 0, Math.PI * 2);\r\n    ctx.fill();\r\n  }\r\n}\r\n\r\nfunction calculateDistance(x1, y1, x2, y2) {\r\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\r\n}\r\n\r\nconst Simulation = () => {\r\n  const canvasRef = useRef(null);\r\n  const stallsRef = useRef([]);\r\n  const customersRef = useRef([]);\r\n  const cashiersRef = useRef([]);\r\n  const [stats, setStats] = useState({\r\n    totalRevenue: 0,\r\n    customersServed: 0,\r\n    averageSpending: 0,\r\n    uselessProductsSold: 0,\r\n    activeCustomers: 0\r\n  });\r\n  \r\n  const [params, setParams] = useState({\r\n    stallsCount: 5,\r\n    width: 1200,\r\n    height: 675,\r\n    stallsWidth: 20,\r\n    stallsHeight: 425,\r\n    isRunning: true,\r\n    customersCount: 1,\r\n    speed: 1,\r\n    cashiersCount: 2,\r\n    spawnRate: 10000\r\n  });\r\n  \r\n  const [visibleCount, setVisibleCount] = useState(0);\r\n  const spawnTimerRef = useRef(0);\r\n\r\n  const initSimulation = () => {\r\n    const newStalls = [];\r\n    const newProducts = [];\r\n    const newCustomers = [];\r\n    const newCashiers = [];\r\n    \r\n    const distBetweenStalls = (params.width - params.stallsCount * params.stallsWidth) / (params.stallsCount - 1);\r\n    \r\n    // Create stalls\r\n    for (let i = 0; i < params.stallsCount; i++) {\r\n      const newStall = new Stall(\r\n        i * params.stallsWidth + i * distBetweenStalls,\r\n        50,\r\n        params.stallsWidth,\r\n        params.stallsHeight,\r\n        i + 1\r\n      );\r\n      newStalls.push(newStall);\r\n      \r\n      // Create products for each stall\r\n      for (let j = 0; j < params.stallsHeight / 12; j++) {\r\n        const newProduct = new Product(\r\n          i * params.stallsWidth + i * distBetweenStalls + params.stallsWidth / 2,\r\n          50 + j * 12 + 3,\r\n          Math.random() * 100 + 10,\r\n          (j + 1) + i * (Math.floor(params.stallsHeight / 12) + 1),\r\n          newStall,\r\n          Math.random() <= 0.5 ? 0 : Math.random() * 90\r\n        );\r\n        newStall.products.push(newProduct);\r\n        newProducts.push(newProduct);\r\n      }\r\n    }\r\n    \r\n    // Create cashiers\r\n    const cashierWidth = 30;\r\n    const cashierHeight = 50;\r\n    const cashierSpacing = 50;\r\n    const totalCashiersWidth = params.cashiersCount * cashierWidth + (params.cashiersCount - 1) * cashierSpacing;\r\n    const startX = (params.width - totalCashiersWidth) / 2;\r\n    \r\n    for (let i = 0; i < params.cashiersCount; i++) {\r\n      const newCashier = new Cashier(\r\n        startX + i * (cashierWidth + cashierSpacing),\r\n        params.height - 100,\r\n        cashierWidth,\r\n        cashierHeight\r\n      );\r\n      newCashiers.push(newCashier);\r\n    }\r\n    \r\n    // Create initial customers\r\n    for (let i = 0; i < params.customersCount; i++) {\r\n      newCustomers.push(new Customer(\r\n        Math.random() * params.width,\r\n        params.height - 6,\r\n        params.speed,\r\n        Math.floor(Math.random() * 3) + 1,\r\n        newProducts.length,\r\n        Math.random() * 2 + 1\r\n      ));\r\n    }\r\n    \r\n    customersRef.current = newCustomers;\r\n    stallsRef.current = newStalls;\r\n    cashiersRef.current = newCashiers;\r\n    setVisibleCount(newProducts.length);\r\n    spawnTimerRef.current = 0;\r\n    \r\n    // Reset stats\r\n    setStats({\r\n      totalRevenue: 0,\r\n      customersServed: 0,\r\n      averageSpending: 0,\r\n      uselessProductsSold: 0,\r\n      activeCustomers: newCustomers.length\r\n    });\r\n  };\r\n  \r\n  const handleParamChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setParams(prev => ({\r\n      ...prev,\r\n      [name]: parseFloat(value)\r\n    }));\r\n  };\r\n  \r\n  const toggleSimulation = () => {\r\n    setParams(prev => ({\r\n      ...prev,\r\n      isRunning: !prev.isRunning\r\n    }));\r\n  };\r\n  \r\n  useEffect(() => {\r\n    initSimulation();\r\n  }, [params.stallsCount, params.cashiersCount]);\r\n  \r\n  useEffect(() => {\r\n    if (!canvasRef.current) return;\r\n    \r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    let animationFrameId;\r\n    \r\n    const animate = () => {\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n      \r\n      // Restock products\r\n      let restocked = false;\r\n      stallsRef.current.forEach(stall => {\r\n        if (stall.restock(params.stallsHeight / 12)) {\r\n          restocked = true;\r\n        }\r\n      });\r\n      \r\n      if (restocked) {\r\n        let productCount = 0;\r\n        stallsRef.current.forEach(stall => {\r\n          productCount += stall.products.length;\r\n        });\r\n        setVisibleCount(productCount);\r\n      }\r\n      \r\n      // Process cashiers\r\n      cashiersRef.current.forEach(cashier => {\r\n        const finishedCustomer = cashier.processCustomer();\r\n        if (finishedCustomer) {\r\n          finishedCustomer.leaveStore();\r\n          setStats(prev => ({\r\n            ...prev,\r\n            totalRevenue: prev.totalRevenue + finishedCustomer.totalSpent,\r\n            customersServed: prev.customersServed + 1,\r\n            uselessProductsSold: prev.uselessProductsSold + finishedCustomer.uselessProductsCount,\r\n            averageSpending: prev.customersServed > 0 ? \r\n              (prev.averageSpending * prev.customersServed + finishedCustomer.totalSpent) / (prev.customersServed + 1) : \r\n              finishedCustomer.totalSpent\r\n          }));\r\n        }\r\n      });\r\n      \r\n      // Move and draw customers\r\n      customersRef.current.forEach(c => {\r\n        c.checkStalls(\r\n          stallsRef.current, \r\n          params.stallsHeight, \r\n          params.stallsWidth, \r\n          cashiersRef.current\r\n        );\r\n        c.move(canvas.width, canvas.height, stallsRef.current, customersRef.current);\r\n        c.draw(ctx);\r\n      });\r\n      \r\n      // Remove customers who left the store\r\n      customersRef.current = customersRef.current.filter(c => c.y < canvas.height + 20);\r\n      \r\n      // Spawn new customers\r\n      if (params.isRunning) {\r\n        spawnTimerRef.current++;\r\n        if (spawnTimerRef.current > params.spawnRate && customersRef.current.length < 50) {\r\n          const newCustomer = new Customer(\r\n            Math.random() * params.width,\r\n            params.height - 6,\r\n            params.speed,\r\n            Math.floor(Math.random() * 3) + 1,\r\n            stallsRef.current.reduce((acc, stall) => acc + stall.products.length, 0),\r\n            Math.random() * 2 + 1\r\n          );\r\n          customersRef.current.push(newCustomer);\r\n          spawnTimerRef.current = 0;\r\n          \r\n          setStats(prev => ({\r\n            ...prev,\r\n            activeCustomers: customersRef.current.length\r\n          }));\r\n        }\r\n      }\r\n      \r\n      // Draw stalls and products\r\n      stallsRef.current.forEach(p => {\r\n        p.draw(ctx);\r\n        p.products.forEach(pr => pr.draw(ctx));\r\n      });\r\n      \r\n      // Draw cashiers\r\n      cashiersRef.current.forEach(c => c.draw(ctx));\r\n      \r\n      if (params.isRunning) {\r\n        animationFrameId = requestAnimationFrame(animate);\r\n      }\r\n    };\r\n    \r\n    if (params.isRunning) {\r\n      animationFrameId = requestAnimationFrame(animate);\r\n    } else {\r\n      // Draw current state when paused\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n      stallsRef.current.forEach(p => p.draw(ctx));\r\n      stallsRef.current.forEach(p => p.products.forEach(pr => pr.draw(ctx)));\r\n      customersRef.current.forEach(c => c.draw(ctx));\r\n      cashiersRef.current.forEach(c => c.draw(ctx));\r\n    }\r\n    \r\n    return () => {\r\n      cancelAnimationFrame(animationFrameId);\r\n    };\r\n  }, [params.isRunning, params.stallsHeight, params.stallsWidth, params.spawnRate]);\r\n  \r\n  return (\r\n    <div className=\"simulation-container\">\r\n      <div className=\"controls\">\r\n        <h2>Управление симуляцией</h2>\r\n        \r\n        <div className=\"control-group\">\r\n          <label>\r\n            Количество отделов:\r\n            <input\r\n              type=\"range\"\r\n              name=\"stallsCount\"\r\n              min=\"1\"\r\n              max=\"10\"\r\n              value={params.stallsCount}\r\n              onChange={handleParamChange}\r\n            />\r\n            {params.stallsCount}\r\n          </label>\r\n        </div>\r\n        \r\n        <div className=\"control-group\">\r\n          <label>\r\n            Количество касс:\r\n            <input\r\n              type=\"range\"\r\n              name=\"cashiersCount\"\r\n              min=\"1\"\r\n              max=\"5\"\r\n              value={params.cashiersCount}\r\n              onChange={handleParamChange}\r\n            />\r\n            {params.cashiersCount}\r\n          </label>\r\n        </div>\r\n        \r\n        <div className=\"control-group\">\r\n          <label>\r\n            Скорость покупателей:\r\n            <input\r\n              type=\"range\"\r\n              name=\"speed\"\r\n              min=\"0.5\"\r\n              max=\"5\"\r\n              step=\"0.1\"\r\n              value={params.speed}\r\n              onChange={handleParamChange}\r\n            />\r\n            {params.speed.toFixed(1)}\r\n          </label>\r\n        </div>\r\n        \r\n        <div className=\"control-group\">\r\n          <label>\r\n            Частота появления:\r\n            <input\r\n              type=\"range\"\r\n              name=\"spawnRate\"\r\n              min=\"10\"\r\n              max=\"300\"\r\n              value={params.spawnRate}\r\n              onChange={handleParamChange}\r\n            />\r\n            {params.spawnRate}\r\n          </label>\r\n        </div>\r\n        \r\n        <div className=\"buttons\">\r\n          <button onClick={initSimulation}>Сбросить</button>\r\n          <button onClick={toggleSimulation}>\r\n            {params.isRunning ? 'Пауза' : 'Старт'}\r\n          </button>\r\n        </div>\r\n        \r\n        <div className=\"stats\">\r\n          <h3>Статистика магазина</h3>\r\n          <p>Выручка: ${stats.totalRevenue.toFixed(2)}</p>\r\n          <p>Обслужено покупателей: {stats.customersServed}</p>\r\n          <p>Средний чек: ${stats.averageSpending.toFixed(2)}</p>\r\n          <p>Ненужных товаров продано: {stats.uselessProductsSold}</p>\r\n          <p>Покупателей в магазине: {stats.activeCustomers}</p>\r\n          <p>Товаров на полках: {visibleCount}</p>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"simulation-area\">\r\n        <canvas\r\n          ref={canvasRef}\r\n          width={params.width}\r\n          height={params.height}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Simulation;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}